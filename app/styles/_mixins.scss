@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function basefont-to-pixel($baseFS) {
  // see http://pxtoem.com/
  @if $baseFS == 37.5% {
    @return 6;
  } @else if $baseFS == 43.8% {
    @return 7;
  } @else if $baseFS == 50.0% {
    @return 8;
  } @else if $baseFS == 56.3% {
    @return 9;
  } @else if $baseFS == 62.5% {
    @return 10;
  } @else if $baseFS == 68.8% {
    @return 11;
  } @else if $baseFS == 75.0% {
    @return 12;
  } @else if $baseFS == 81.3% {
    @return 13;
  } @else if $baseFS == 87.5% {
    @return 14;
  } @else if $baseFS == 93.8% {
    @return 15;
  } @else if $baseFS == 100.0% {
    @return 16;
  }

}

@mixin font-calculator($fontFamily, $fontSize, $divider: null) {

  // the font calculator works out of a uniform vertical rhythm between font sizes and bottom margins
  // use the mixin like so:
  // #hightlight-this h1 {
  // @include font-calculator('Helvetica, sans-serif', 14, 2);
  // }
  // note that the third parameter is optional
  // the first parameter is the font family
  // the second is the font size in pixels - without the pixel unit value
  // font size is converted

  $fontSizeRem: strip-units($fontSize)/basefont-to-pixel($baseFontSize);
  font: unquote($fontSizeRem + "rem") #{$fontFamily};

  @if $divider == 0 {
    margin-bottom: 0;
  } @else if $divider == 0.5 {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem / 2) + "rem");
  } @else if $divider == 0.25 {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem / 4) + "rem");
  } @else if $divider == null {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem)+"rem");
  }

}

// uses same calculation method as the font-calculator
@mixin margin-calculator($fontSize, $divider: null) {

  $fontSizeRem: strip-units($fontSize)/basefont-to-pixel($baseFontSize);

  @if $divider == 0 {
    margin-bottom: 0;
  } @else if $divider == 0.5 {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem / 2) + "rem");
  } @else if $divider == 0.25 {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem / 4) + "rem");
  } @else if $divider == null {
    margin-bottom: unquote((strip-units($baseLineHeight) / $fontSizeRem)+"rem");
  }

}

// media queries mixin
@mixin breakpoint($name) {
  @if $name == "wide" {
    @media screen and (max-width: 1366px) {
      @content;
    }
  } @else if $name == "standard" {
    @media screen and (max-width: 960px) {
      @content;
    }
  } @else if $name == "tablet" {
    @media screen and (max-width: 767px) {
      @content;
    }
  } @else if $name == "mobile" {
    @media screen and (max-width: 500px) {
      @content;
    }
  } @else if $name == "ipad" {
    // check that this works
    @media screen and (max-device-width: 1024px), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
      @content;
    }
  } @else if $name == "ipadlandscape" {
    // check that this works
    @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
      @content;
    }
  } @else if $name == "ipadportrait" {
    // check that this works
    @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: portrait), (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
      @content;
    }
  } @else if $name == "retina" {
    // check that this works
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
      @content;
    }
  }

}

// sharper fonts
@mixin font-sharp() {
  text-rendering: optimizeLegibility;
  -webkit-font-kerning: normal;
  -moz-font-kerning: normal;
  font-kerning: normal;
  -webkit-font-feature-settings: "liga";
  -moz-font-feature-settings: "liga", "kern";
  font-feature-settings: "liga", "kern";
}

// Overflow Ellipsis
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Word Wrapping
@mixin word-wrap() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

// calc function
@mixin calc($property, $value) {
  #{$property}: -webkit-calc(#{$value});
  #{$property}: calc(#{$value});
}

// css transitions
@mixin transitions($value...) {
  -ms-transition: $value;
  -webkit-transition: $value;
  transition: $value;
}

// css transform
@mixin transform($value...) {
  -ms-transform: $value;
  -webkit-transform: $value;
  transform: $value;
}

// css boxshadow
@mixin boxshadow($value...) {
  -webkit-box-shadow: $value;
  box-shadow: $value;
}