/*jshint quotmark: false */
/*jshint camelcase: false */
/**
 * Created by awalpole on 08/09/2014.
 */

'use strict';
describe('Controller: "FooterCtrl as FooterInherCtrl', function () {

  var $controller;
  var $rootScope;
  var MOCK_DATA;
  var $httpBackend;
  var $q;
  var scope;
  var FooterInherCtrl;
  var newsBlurResponse;

  newsBlurResponse = {"authenticated": true, "stories": [
    {"story_authors": "Addy", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://addyosmani.com/blog/slides-javascript-memory-management-masterclass/", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1409615057", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "16770:70f46f", "id": "http://addyosmani.com/blog/?p=6790", "comment_count": 0, "story_title": "Slides: JavaScript Memory Management Masterclass", "story_tags": ["web development", "javascript", "management", "memory"], "share_count": 0, "friend_comments": [], "story_date": "2014-09-01 23:44:17", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "01 Sep 2014, 7:44pm", "guid_hash": "70f46f", "share_count_friends": 0, "image_urls": [], "story_feed_id": 16770, "long_parsed_date": "Monday, September 1st 7:44pm", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Wednesday, September 3rd 6:20am", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "Presented at at the Google WebPerf Special (London WebPerf Group), August 26th 2014. Efficient JavaScript webapps need to be fluid and fast. Any app with significant user interaction needs to consider how to effectively keep memory usage down because if &#8230; <a href=\"http://addyosmani.com/blog/slides-javascript-memory-management-masterclass/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>", "starred": true},
    {"story_authors": "David Walsh", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://feedproxy.google.com/~r/Bludice/~3/WQqJIo1A7aU/insertadjacenthtml-beforeend", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1408457281", "share_user_ids": [136359], "user_id": 103195, "user_tags": [], "story_hash": "4055:fa38c8", "id": "http://davidwalsh.name/?p=25072", "comment_count": 0, "story_title": "JavaScript insertAdjacentHTML and\u00a0beforeend", "story_tags": ["javascript"], "share_count": 1, "friend_comments": [], "story_date": "2014-08-19 14:08:01", "share_count_public": 1, "friend_user_ids": [], "public_user_ids": [136359], "short_parsed_date": "19 Aug 2014, 10:08am", "guid_hash": "fa38c8", "share_count_friends": 0, "image_urls": ["http://davidwalsh.name/wp-content/themes/punky/images/sda/treehouse-banner.jpg", "http://davidwalsh.name/wp-content/themes/punky/images/sda/wufoo-static.jpg", "http://feeds.feedburner.com/~r/Bludice/~4/WQqJIo1A7aU"], "story_feed_id": 4055, "long_parsed_date": "Tuesday, August 19th, 2014 10:08am", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Thursday, August 21st, 2014 3:37am", "read_status": 1, "shared_by_public": [136359], "has_modifications": true, "comment_count_public": 0, "commented_by_public": [], "story_content": "<p><del></del></p><p><del>Read the full article at:  <a href=\"http://davidwalsh.name/insertadjacenthtml-beforeend\">JavaScript insertAdjacentHTML and\u00a0beforeend</a></del></p><del> </del><p><del><a href=\"http://dwf.tw/treehouse\"><img alt=\"Treehouse\" src=\"http://davidwalsh.name/wp-content/themes/punky/images/sda/treehouse-banner.jpg\"></a><br><a href=\"http://dwf.tw/wufoo\"><img alt=\"Wufoo\" height=\"90\" src=\"http://davidwalsh.name/wp-content/themes/punky/images/sda/wufoo-static.jpg\" width=\"728\"></a></del></p> <p>In case you didn\u2019t know: \u00a0the damn DOM is slow. \u00a0As we make our websites more dynamic and AJAX-based, we need to find ways of manipulating the DOM with as little impact on performance as possible. \u00a0A while back I mentioned <a href=\"http://davidwalsh.name/documentfragment\">DocumentFragments</a>, a clever way of collecting child elements under a \u201cpseudo-element\u201d so that you could mass-inject them into a parent. \u00a0Another great element method is\u00a0<code>insertAdjacentHTML</code>: \u00a0a way\u00a0to inject HTML into an element without\u00a0affecting any elements within the parent.</p> <h2>The JavaScript</h2> <p>If you have a chunk of HTML in string format,\u00a0returned from an AJAX request (for example), the common way of adding those elements to a parent is via innerHTML:</p> <pre class=\"js\">function onSuccess(newHtml) {\n\tparentNode.innerHTML += newHtml;\t\n}\n</pre> <p>The problem with the above is that any references to\u00a0child elements or events connected to them are destroyed due to setting\u00a0the\u00a0innerHTML, even if you\u2019re only appending more HTML \u2013\u00a0<code>insertAdjacentHTML</code> and\u00a0beforeend fixes that issue:</p> <pre class=\"js\">function onSuccess(newHtml) {\n\tparentList.insertAdjacentHTML('beforeend', newHtml);\n}\n</pre> <p>With the code sample above, the string of HTML is appended to the parent\u00a0<em>without</em>affecting other elements under\u00a0the\u00a0same parent. \u00a0It\u2019s an ingenious way of injecting HTML into a\u00a0parent node without the dance of appending HTML or temporarily creating\u00a0a parent node and placing the child HTML within it.</p> <p>This API wreaks of knowing a problem exists and fixing it \u2014 who would have thought?! \u00a0OK, that was a bit passive aggressive but you know what I mean. \u00a0Keep\u00a0<code>insertAdjacentHTML</code> handy \u2014 it\u2019s a very lesser known API that more of us should be using!</p> <p><ins></ins></p><p><ins>Read the full article at:  <a href=\"http://davidwalsh.name/insertadjacenthtml-beforeend\">JavaScript insertAdjacentHTML and\u00a0beforeend</a></ins></p><ins> </ins><p><ins><a href=\"http://dwf.tw/treehouse\"><img alt=\"Treehouse\" src=\"http://davidwalsh.name/wp-content/themes/punky/images/sda/treehouse-banner.jpg\"></a><br><a href=\"http://dwf.tw/wufoo\"><img alt=\"Wufoo\" height=\"90\" src=\"http://davidwalsh.name/wp-content/themes/punky/images/sda/wufoo-static.jpg\" width=\"728\"></a></ins></p><ins> </ins><ins><img height=\"1\" src=\"http://feeds.feedburner.com/~r/Bludice/~4/WQqJIo1A7aU\" width=\"1\"></ins> <del><img height=\"1\" src=\"http://feeds.feedburner.com/~r/Bludice/~4/WQqJIo1A7aU\" width=\"1\"></del>", "starred": true},
    {"story_authors": "Chris Coyier", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://dev.opera.com/articles/responsive-images/", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1406160571", "share_user_ids": [109116], "user_id": 103195, "user_tags": [], "story_hash": "532943:89f00f", "id": "http://css-tricks.com/?p=176263", "comment_count": 0, "story_title": "Responsive Images: Use Cases and Documented Code Snippets to Get You Started", "story_tags": ["link"], "share_count": 1, "friend_comments": [], "story_date": "2014-07-24 00:09:31", "share_count_public": 1, "friend_user_ids": [], "public_user_ids": [109116], "short_parsed_date": "23 Jul 2014, 8:09pm", "guid_hash": "89f00f", "share_count_friends": 0, "image_urls": [], "story_feed_id": 532943, "long_parsed_date": "Wednesday, July 23rd, 2014 8:09pm", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Friday, July 25th, 2014 3:20pm", "read_status": 1, "shared_by_public": [109116], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p>Andreas Bovens put together this epic recipe list for <code>&lt;picture&gt;</code> / <code>&lt;img srcset&gt;</code>. There are four scenarios:</p>\n<blockquote><ul>\n<li>Do my image <strong>sizes</strong> change depending on my responsive design rules?</li>\n<li>Do I want to optimize for high-<strong>dpi</strong> screens?</li>\n<li>Do I want to serve images with different <strong>mime</strong> types to browsers that support them?</li>\n<li>Do I want to serve different <strong>art</strong> depending on certain contextual factors?</li>\n</ul>\n</blockquote>\n<p>Then Andreas shares what the code would look like for all of those plus <em>any combination</em> of them. </p>\n<p><a href=\"http://dev.opera.com/articles/responsive-images/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"http://css-tricks.com/responsive-images-use-cases-documented-code-snippets-get-started/\">Permalink</a></p><hr />\n<p><small><a href=\"http://css-tricks.com/responsive-images-use-cases-documented-code-snippets-get-started/\" rel=\"nofollow\">Responsive Images: Use Cases and Documented Code Snippets to Get You Started</a> is a post from <a href=\"http://css-tricks.com\" rel=\"nofollow\">CSS-Tricks</a></small></p>", "starred": true},
    {"story_authors": "Lamin Sanneh", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://feedproxy.google.com/~r/SitepointFeed/~3/UlECAclXTEs/", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1405623622", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "5025883:eaea96", "id": "http://www.sitepoint.com/?p=85440", "comment_count": 0, "story_title": "Dependency Injection: Angular vs. RequireJS", "story_tags": ["angularjs", "javascript", "tools and libraries", "colini", "dependency injection", "requirejs"], "share_count": 0, "friend_comments": [], "story_date": "2014-07-17 19:00:22", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "17 Jul 2014, 3:00pm", "guid_hash": "eaea96", "share_count_friends": 0, "image_urls": ["http://feeds.feedburner.com/~ff/SitepointFeed?d=yIl2AUoC8zA", "http://feeds.feedburner.com/~ff/SitepointFeed?d=qj6IDK7rITs", "http://feeds.feedburner.com/~ff/SitepointFeed?i=UlECAclXTEs:NJNXuOTJEJk:gIN9vFwOqvQ", "http://feeds.feedburner.com/~r/SitepointFeed/~4/UlECAclXTEs"], "story_feed_id": 5025883, "long_parsed_date": "Thursday, July 17th, 2014 3:00pm", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Tuesday, July 22nd, 2014 5:53pm", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p><p>If you have built large JavaScript applications before, chances are, you have faced the task of managing component dependencies. You can think of a component as a block of functionality. It may be a function, object, or an instance. The block chooses to expose one or more public methods. It may also choose to hide non-public functionality. In this article, we will look at two major libraries, AngularJS and RequireJS. We will analyse how they use dependency injection to share components across an application.</p>\n<h2 id=\"short-story-on-dependency-injection\">Short Story on Dependency Injection</h2>\n<p>Dependency injection becomes a necessity when you need an easy way to pull in one or more components into an application. For example, assume you have two components named <code>database</code> and <code>logger</code>. Assuming that the <code>database</code> component exposes the methods <code>getAll</code>, <code>findById</code>, <code>create</code>, <code>update</code>, and <code>delete</code>. The <code>logger</code> component only has one method, <code>saveNewLog</code>, in it's public API. Let's assume the <code>logger</code> component depends on the <code>database</code> component to function. Using dependency injection, we could pass in the <code>database</code> component as a dependency to the <code>logger</code> component during creation.</p>\n<p>Just so you can visualize the dependencies better, I'll write it in code. Note that the actual syntax depends on the dependency injection library you use. Angular and RequireJS have different syntax, so the code below is a generic example and we'll get to actual representations of the two libraries in a bit.</p>\n<p>Here is the <code>database</code> API:</p>\n\n[js]\nfunction database() {\n  var publicApis = {\n    getAll: function() {},\n    findById: function(id) {},\n    create: function(newObject) {},\n    update: function(id, objectProperties) {},\n    delete: function(id) {}\n  };\n\n  return publicApis;\n}\n[/js]\n\n<p>And, here is the <code>logger</code> API:</p>\n\n[js]\nfunction logger(database) {\n  var publicApis = {\n    saveNewLog: function() {}\n  };\n\n  return publicApis;\n}\n[/js]\n\n<p>As you can see, we are passing the <code>database</code> component into the constructor of the <code>logger</code>. The part of the application which handles the instantiation of the <code>logger</code> must provide it with an instance of a <code>database</code> component.</p>\n<h2 id=\"the-need-for-dependency-injection\">The Need for Dependency Injection</h2>\n<p>Now that we are more educated about what dependency injection is, let's identify what benefits it brings to the table. If you are an advocate of good JavaScript design, some benefits of dependency injection may be obvious to you. If they're not, let me explain a few of the general benefits. I believe these apply across the board whether you use AngularJS or RequireJS.</p>\n<h3 id=\"testing-becomes-a-breeze\">Testing Becomes a Breeze</h3>\n<p>Testing becomes much easier because you can provide mocked dependencies instead of real implementations.</p>\n<h3 id=\"separation-of-concerns\">Separation of Concerns</h3>\n<p>Dependency injection lets you separate the parts of your application so that each one handles a distinct job. In the above example, the <code>database</code> module is only concerned with dealing with a database. The <code>logger</code> module is only responsible for logging data, whether it is in a database, file, or the console. The benefit of this is easier swapping of dependencies. If we later decide that we need to use a file-based database instead of a traditional relational database, we just have to pass in a different module. This module just has to exposes the same API methods as the <code>database</code> module, and the <code>logger</code> module would continue to work properly.</p></p><p><em>Continue reading %<a href=\"http://www.sitepoint.com/dependency-injection-angular-vs-requirejs/\" rel=\"nofollow\">Dependency Injection: Angular vs. RequireJS</a>%</em></p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=UlECAclXTEs:NJNXuOTJEJk:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=UlECAclXTEs:NJNXuOTJEJk:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?d=qj6IDK7rITs\" /></a> <a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=UlECAclXTEs:NJNXuOTJEJk:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?i=UlECAclXTEs:NJNXuOTJEJk:gIN9vFwOqvQ\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/SitepointFeed/~4/UlECAclXTEs\" width=\"1\" />", "starred": true},
    {"story_authors": "remotesynth", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://flippinawesome.org/2014/05/28/dynamic-css-with-dyncss/?utm_source=rss&utm_medium=rss&utm_campaign=dynamic-css-with-dyncss", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1401280576", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "3844408:5173a0", "id": "http://flippinawesome.org/?p=2223", "comment_count": 0, "story_title": "Dynamic CSS with DynCSS", "story_tags": ["css", "featured", "html", "javascript", "responsive web design", "web"], "share_count": 0, "friend_comments": [], "story_date": "2014-05-28 12:36:16", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "28 May 2014, 8:36am", "guid_hash": "5173a0", "share_count_friends": 0, "image_urls": [], "story_feed_id": 3844408, "long_parsed_date": "Wednesday, May 28th, 2014 8:36am", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Saturday, May 31st, 2014 6:37am", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "By Vittorio Zaccaria DynCSS is a small Javascript add-on for your web pages. It parses your CSS and converts all the rules with prefix -dyn-* into dynamic Javascript that is executed on browser&#8217;s events like scroll and resize. For example, the following CSS will center vertically .header, dynamically changing margin-top as the window is resized: [&#8230;]", "starred": true},
    {"story_authors": "Raymond Camden", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://feedproxy.google.com/~r/nettuts/~3/pnLR3k7X59E/working-with-intl--cms-21082", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1399927505", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "89:b0fa12", "id": "tag:code.tutsplus.com,2005:PostPresenter/cms-21082", "comment_count": 0, "story_title": "Working With Intl", "story_tags": [], "share_count": 0, "friend_comments": [], "story_date": "2014-05-12 20:45:05", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "12 May 2014, 4:45pm", "guid_hash": "b0fa12", "share_count_friends": 0, "image_urls": ["https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s1.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s2.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s3.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s4.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s5.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s6.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s7.png", "https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s8.png", "http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA", "http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:F7zBnMyn0Lo", "http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:V_sGLiPBpWU", "http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:gIN9vFwOqvQ", "http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174", "http://feeds.feedburner.com/~r/nettuts/~4/pnLR3k7X59E"], "story_feed_id": 89, "long_parsed_date": "Monday, May 12th, 2014 4:45pm", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Tuesday, May 13th, 2014 9:35am", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p>Internationalization - something you constantly hear developers talking about but rarely actually see people using in practice - is getting a kick in the pants with the new <a href=\"http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html\">ECMAScript Internationalization API</a>. Currently supported in Chrome 24, Chrome for Android, Firefox 29, IE 11, and Opera 15 (sadly no Safari support), the new Intl namespace provides a set of functionality to add internationalization to your numbers, dates, and sorting. In this article I'll demonstrate the major features of Intl and get you on the path to adopting support for the billions of people on the Internet who live outside your own country!</p>\n\n<h2>Core Features</h2>\n\n<p>The Intl namespace covers three main areas of functionality: </p>\n\n<ul>\n<li>Formatting numbers </li>\n<li>Formatting dates</li>\n<li>Sorting strings</li>\n</ul>\n\n<p>Within each of these are various options for controlling both the locales used for formatting as well as formatting options. As an example, the number formatter includes support for handling currency. The date formatter has options for what parts of the date to display. </p>\n\n<p>Lets take a look at a few examples. </p>\n\n<h2>Our Application</h2>\n\n<p>Our first application is a simple data reporter. It uses AJAX to fetch a set of data containing dates and numbers. First, the HTML:</p>\n\n<p>Listing 1: <code>test1.html</code>:</p>\n\n<pre class=\"brush: html\">&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;meta charset=\"utf-8\"&gt;\n            &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt;\n            &lt;title&gt;&lt;/title&gt;\n            &lt;meta name=\"description\" content=\"\"&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width\"&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n\n            &lt;h2&gt;Current Stats&lt;/h2&gt;\n            &lt;table id=\"stats\"&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Date&lt;/th&gt;\n                        &lt;th&gt;Visits&lt;/th&gt;\n                    &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;&lt;/tbody&gt;\n            &lt;/table&gt;\n\n            &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js\"&gt;&lt;/script&gt;\n            &lt;script src=\"app1.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;</pre>\n\n<p>Make note of the empty table. That's where we will be dumping our data. Now let's take a look at the JavaScript.</p>\n\n<p>Listing 2: <code>app1.js</code>:</p>\n\n<pre class=\"brush: javascript\">$(document).ready(function() {\n\n        //get the table dom\n        $table = $(\"#stats tbody\");\n        //now, get our data from the api, which is fake btw\n        $.getJSON(\"stats.json\").done(function(s) {\n            //iterate over stats and add to table\n            for(var i=0; i &lt; s.length; i++) {\n                $table.append(\"\"+s[i].date+\"\"+s[i].views+\"\");\n            }\n        }).fail(function(e) {\n            console.log(\"we failed\");\n            console.dir(e);\n        });\n    });\n</pre>\n\n<p>All that the code does here,&nbsp;is make an AJAX call to a file and render the result to the data. The data file, <code>stats.json</code>, is simply an array of ten hard coded values. Here is a portion of the file:</p>\n\n<pre class=\"brush: javascript\">[{\"date\":\"4/1/2013\",\"views\":938213},{\"date\":\"4/2/2013\",\"views\":238213},\n</pre>\n\n<p>As you can see, the dates are formatted as <code class=\"inline\">month/date/year</code> and the numbers are passed, as is. This renders acceptably:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s1.png\" /></figure>\n\n<p>But note the the numbers are a bit hard to read without formatting. Let's begin by adding some formatting to the numbers. </p>\n\n<h2>Adding Number Formatting</h2>\n\n<p>The following modifications can be seen in <code>app2.js</code> and tested with <code>test2.html</code>. First, I'll modify my code to call a new function, <code>numberFormat</code>:</p>\n\n<pre class=\"brush: javascript\">$table.append(\"\"+s[i].date+\"\"+numberFormat(s[i].views)+\"\");</pre>\n\n<p>And here is that function:</p>\n\n<pre class=\"brush: javascript\">function numberFormat(n) {\n        //cache the formatter once\n        if(window.Intl &amp;&amp; !window.numberFormatter) window.numberFormatter = window.Intl.NumberFormat();\n\n        if(window.numberFormatter) {\n            return window.numberFormatter.format(n);\n        } else {\n            return n;   \n        }\n    }</pre>\n\n<p>The function begins by checking if <code class=\"inline\">Intl</code> exists as part of the <code class=\"inline\">window</code> object. If it does, we then check to see if we've made the formatter before. The <code class=\"inline\">Intl</code> object creates a formatting object that you can reuse, and since we're formatting a bunch of numbers, we only want to create it one time. Which is exactly what we do as soon as we see that we need too. We don't bother with any options for now, just to keep it simple. Finally, if there was no support for <code class=\"inline\">Intl</code> at all, we just return the number as is. The result is a significant improvement, with minimal work:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s2.png\" /></figure>\n\n<p>Cool! So, how do we test other languages?&nbsp;You may be tempted to check your browser settings. All browsers have a preference for language, but unfortunately, changing the language <em>in the browser</em> is not enough. Changing it <em>does</em> impact how the browser behaves.&nbsp;</p><p>If you open your dev tools and look at network requests, you can see that a header called \"<b>Accept-Lanage</b>\" will change based on your settings. If you add French, for example (I'm assuming you aren't a native French speaker), you will see \"<b>fr</b>\" added to this header. But this does not impact <code class=\"inline\">Intl</code>. Instead, you have to change your operating system language and restart the browser. This is <em>not</em> as scary as it sounds. When I tested, I was worried my entire operating system would change immediately. But in my tests, I was able to change the language, restart my browser, and see the change. I quickly changed back. The Intl formatter functions allow you to override the current locale and pass one in instead. </p>\n\n<p>I modified the application to allow the end user to specify a language via a drop down. Here's the modification made to the HTML. (This modification may be found in <code>test3.html</code>)</p>\n\n<pre class=\"brush: html\">&lt;select id=\"langDropdown\"&gt;\n        &lt;option value=\"\"&gt;None Specified&lt;/option&gt;\n        &lt;option value=\"en-US\"&gt;English (US)&lt;/option&gt;\n        &lt;option value=\"fr-FR\"&gt;French (France)&lt;/option&gt;\n        &lt;option value=\"lt\"&gt;Lithuanian&lt;/option&gt;\n    &lt;/select&gt;</pre>\n\n<p>The languages I picked were pretty arbitrary. Next - I updated my application code to listen to changes to this drop down as well as checking the desired locale when formatting. </p>\n\n<p>Listing 3: <code>app3.js</code>:</p>\n\n<pre class=\"brush: javascript\">function numberFormat(n) {\n\n        if(window.Intl) {\n            var lang = $(\"#langDropdown\").val();\n            if(lang === \"\") lang = navigator.language;\n            var formatter = new window.Intl.NumberFormat(lang);\n            return formatter.format(n);\n        } else {\n            return n;   \n        }\n    }\n\n    function getStats() {\n\n        $.getJSON(\"stats.json\").done(function(s) {\n            //iterate over stats and add to table\n            for(var i=0; i &lt; s.length; i++) {\n                $table.append(\"\"+s[i].date+\"\"+numberFormat(s[i].views)+\"\");\n            }\n        }).fail(function(e) {\n            console.log(\"we failed\");\n            console.dir(e);\n        });\n\n    }\n\n    $(document).ready(function() {\n\n        //get the table dom\n        $table = $(\"#stats tbody\");\n\n        //notice changes to drop down\n        $(\"#langDropdown\").on(\"change\", function(e) {\n            $table.empty();\n            getStats();\n        });\n\n        getStats();\n    });\n</pre>\n\n<p>Starting at the bottom - note that I've added a simple event handler for changes to the drop down. When a change is detect, the table is emptied out and the function <code class=\"inline\">getStats</code> is run. This new function simply abstracts the AJAX code used previously. The real change now is in <code class=\"inline\">numberFormat</code>. I check the language selected and if one of them was chosen, we pass that as the locale to the <code class=\"inline\">NumberFormat</code> constructor. Note that if something wasn't chosen, we default to <code class=\"inline\">navigator.language</code>. This now gives us a way to quickly test different locales and see how they render numbers.</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s3.png\" /></figure>\n\n<h2>Adding Date Formatting</h2>\n\n<p>Now is a perfect time to take care of the other column of data - the numbers. I followed the same style as before and added a call to a new function, <code>dateFormat</code>.</p>\n\n<pre class=\"brush: javascript\">$table.append(\"\"+dateFormat(s[i].date)+\"\"+numberFormat(s[i].views)+\"\");</pre>\n\n<p>And here is <code>dateFormat</code> (You can find the code in <code>app4.js</code>, which is used by <code>test4.html</code>):</p>\n\n<pre class=\"brush: javascript\">function dateFormat(n) {\n\n    //Used for date display\n    var opts = {};\n    opts.day = \"numeric\";\n    opts.weekday = \"long\";\n    opts.year = \"numeric\";\n    opts.month = \"long\";\n\n    if(window.Intl) {\n        var lang = $(\"#langDropdown\").val();\n        if(lang === \"\") lang = navigator.language;\n\n        var formatter = new window.Intl.DateTimeFormat(lang, opts);\n        n = new Date(n);\n        return formatter.format(n);\n    } else {\n        return n;   \n    }\n}\n</pre>\n\n<p>This is very similar to number formatting, except this time we are explicitly passing some options when we create the formatter. The options specify both what fields are visible in the date, as well as how they look. Each part of a date can be shown or not, and each one has different options.  The options include:</p>\n\n<ul>\n<li>weekday</li>\n<li>era</li>\n<li>year</li>\n<li>month</li>\n<li>day</li>\n<li>hour</li>\n<li>minute</li>\n<li>second</li>\n<li>timeZoneName</li>\n</ul>\n\n<p>For a full list of what values you can use, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\">MDN documentation</a> for <code>DateTimeFormat</code>, but as an example, months can be displayed as a number or in different textual forms. So what does this create? Here is the English version:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s4.png\" /></figure>\n\n<p>And here it is in French:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s5.png\" /></figure>\n\n<p>You may be wondering - what covers the location of each field? As far as I can tell, you have no control over this. You could, of course, create multiple formatters and then combine them together, but using one formatter the layout of the fields is driven by internal logic. If you turn off the day of the month, for example, here is what you get: April 2013 Monday. Why? Honestly I have no idea. </p>\n\n<p>Finally - note that you need to pass a date value, not a string, to the formatter. You can see where I use the date constructor in the formatter to parse my string-based date. This is - a bit loose - so keep this in mind when using this functionality.</p>\n\n<h2>Show Me the Money</h2>\n\n<p>Currency formatting isn't a separate object, but rather an optional use of the number formatter. For the next demo, we've created a new data file, <code>stats2.json</code>, and added a \"sales\" column to our data. Here is a sample:</p>\n\n<pre class=\"brush: javascript\">{\"date\":\"4/1/2013\",\"views\":938213,\"sales\":3890.21},{\"date\":\"4/2/2013\",\"views\":238213,\"sales\":9890.10}</pre>\n\n<p>The column was added to the HTML (<code>test5.html</code>), added within the JavaScript iterating over the rows of data (see <code>app5.js</code>), and passed to a new function called <code>currencyFormat</code>. Let's look at that.</p>\n\n<pre class=\"brush: javascript\">function currencyFormat(n) {\n\n    var opts = {};\n    opts.style = \"currency\";\n    opts.currency = \"USD\";\n\n    if(window.Intl) {\n        var lang = $(\"#langDropdown\").val();\n        if(lang === \"\") lang = navigator.language;\n        var formatter = new window.Intl.NumberFormat(lang,opts);\n        return formatter.format(n);\n    } else {\n        return n;   \n    }\n}\n</pre>\n\n<p>Displaying numbers as currencies requires two optional values. First, a style of \"currency\", and then the currency type. Other options (like how to display the name of the currency) exists as well. Here comes the part that may trip you up a bit. You <em>must</em> specify the currency type.&nbsp;</p><p>You may think - how in the heck do I figure out the currency type for all the possible values? The possible values are based on a spec (<a>http://www.currency-iso.org/en/home/tables/table-a1.html</a>) and in theory you could parse their XML, but you don't want to do that. The reason why is pretty obvious but I can honestly say I forgot initially as well. You do not want to just redisplay a particular number in a locale specific currency. Why? Because ten dollars American is certainly <em>not</em> the same as ten dollars in pesos. That's pretty obvious and hopefully I'm the only person to forget that. </p>\n\n<p>Using the code above, we can see the following results in the French locale. Note how the numbers are formatted right for the locale and the currency symbol is placed after the number.</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s6.png\" /></figure>\n\n<h2>Sorting With Collator</h2>\n\n<p>For our final example, we'll look at the <code class=\"inline\">Collator</code>&nbsp;constructor. Collators allow you to handle text sorting. While some languages follow a simple A to Z ordering system other languages have different rules. And of course, things get even more interesting when you start adding accents. Can you say, for certain, if \u00e4 comes after a? I know I can't. The collator constructor takes a number of arguments to help it specify exactly how it should sort, but the default will probably work well for you. </p>\n\n<p>For this example, we've built an entirely new demo, but one similar to the previous examples. In <code>test6.html</code>, you can see a new table, for <code class=\"inline\">Students</code>. Our new code will load up a JSON packet of students and then sort them on the client. The JSON data is simply an array of names so I'll skip showing an excerpt. Let's look at the application logic.</p>\n\n<p>Listing 4: <code>app6.js</code>:</p>\n\n<pre class=\"brush: javascript\">function sorter(x,y) {\n\n        if(window.Intl) {\n            var lang = $(\"#langDropdown\").val();\n            if(lang === \"\") lang = navigator.language;      \n            return window.Intl.Collator(lang).compare(x,y);\n        } else {\n            return x.localeCompare(y);  \n        }\n    }\n\n    function getStudents() {\n\n        $.getJSON(\"students.json\").done(function(s) {\n            //iterate over stats and add to table\n            s.sort(sorter);\n            for(var i=0; i &lt; s.length; i++) {\n                $table.append(\"\"+s[i]+\"\");\n            }\n        }).fail(function(e) {\n            console.log(\"we failed\");\n            console.dir(e);\n        });\n\n    }\n\n    $(document).ready(function() {\n\n        //get the table dom\n        $table = $(\"#students tbody\");\n\n        //notice changes to drop down\n        $(\"#langDropdown\").on(\"change\", function(e) {\n            $table.empty();\n            getStudents();\n        });\n\n        getStudents();\n    });\n</pre>\n\n<p>As I said, this code is pretty similar to the previous examples, so focus on <code>getStudents</code> first. The crucial line here is: <code>s.sort(sorter)</code>. We're using the built in function for arrays to do sorting via a custom function. That function will be passed two things to compare and must return <code>-1</code>, <code>0</code>, or <code>1</code> to represent how the two items should be sorted. Now let's look at sorter.</p>\n\n<p>If we have an <code class=\"inline\">Intl</code> object, we create a new <code class=\"inline\">Collator</code> (and again, we're allowing you to pass in a locale) and then we run the <code class=\"inline\">compare</code> function. That's it. As I said, there are options to modify how things are sorted, but we can use the defaults. The fallback is <code>localeCompare</code>, which will also attempt to use locale specific formatting, but has (in this form) slightly better support. We could check for that support as well and add one more fallback for <em>really</em> good support, but I'll leave that for you,&nbsp;as an exercise.</p>\n\n<p>We've also modified the front end to use Swedish as a language. I did this because the excellent MDN <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\">documentation</a> showed that it was a good way to see the sorting in action. Here's the English sort of our student names:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s7.png\" /></figure>\n\n<p>And here it is in Swedish:</p><figure class=\"post_image\"><img alt=\"\" src=\"https://s3.amazonaws.com/cms-assets.tutsplus.com/uploads/users/45/posts/21082/image/s8.png\" /></figure>\n\n<p>Note how \u00e4test is sorted differently. (Sorry, I couldn't think of a name that began with \u00e4.) </p>\n\n<h2>Wrap Up</h2>\n\n<p>All in all, the <code class=\"inline\">Intl</code> class provides some <em>very</em> simple ways to add locale specific formatting to your code. This is certainly something you can find now, probably in a few thousand different JavaScript libraries, but it is great to see the browser manufacturers adding in support directly within the language itself. The lack of iOS support is a bummer, but hopefully it will be added soon.</p>\n\n<p>Thanks goes to the excellent Mozilla Developer Network for its great <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\">Intl</a> documentation.</p><div class=\"feedflare\">\n<a href=\"http://feeds.feedburner.com/~ff/nettuts?a=pnLR3k7X59E:wC1OIunh0lg:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/nettuts?d=yIl2AUoC8zA\" /></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=pnLR3k7X59E:wC1OIunh0lg:F7zBnMyn0Lo\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:F7zBnMyn0Lo\" /></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=pnLR3k7X59E:wC1OIunh0lg:V_sGLiPBpWU\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:V_sGLiPBpWU\" /></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=pnLR3k7X59E:wC1OIunh0lg:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/nettuts?i=pnLR3k7X59E:wC1OIunh0lg:gIN9vFwOqvQ\" /></a> <a href=\"http://feeds.feedburner.com/~ff/nettuts?a=pnLR3k7X59E:wC1OIunh0lg:TzevzKxY174\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/nettuts?d=TzevzKxY174\" /></a>\n</div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/nettuts/~4/pnLR3k7X59E\" width=\"1\" />", "starred": true},
    {"story_authors": "Chris Coyier", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "https://medium.com/p/7c03a9274f9", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1395341781", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "532943:067358", "id": "http://css-tricks.com/?p=166397", "comment_count": 0, "story_title": "Crafting link underlines on Medium", "story_tags": ["link"], "share_count": 0, "friend_comments": [], "story_date": "2014-03-20 18:56:21", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "20 Mar 2014, 2:56pm", "guid_hash": "067358", "share_count_friends": 0, "image_urls": [], "story_feed_id": 532943, "long_parsed_date": "Thursday, March 20th, 2014 2:56pm", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Friday, March 21st, 2014 10:50pm", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p>Quite the in-depth exploration of underlined text on the web by Marcin Wichary.</p>\n<p>In the end, <code>linear-gradient</code> won the day with the most control, best look, and best performance. Some people have been <a href=\"http://codepen.io/jxnblk/pen/jCmwK\">playing</a> <a href=\"http://codepen.io/timbrown/pen/kuDxK\">with it</a> on CodePen. </p>\n<p><a href=\"https://medium.com/p/7c03a9274f9\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"http://css-tricks.com/crafting-link-underlines-medium/\">Permalink</a>&#8230;</p>\n<hr />\n<p><small><a href=\"http://css-tricks.com/crafting-link-underlines-medium/\" rel=\"nofollow\">Crafting link underlines on Medium</a> is a post from <a href=\"http://css-tricks.com\" rel=\"nofollow\">CSS-Tricks</a></small></p>", "starred": true},
    {"story_authors": "Matt West", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://blog.teamtreehouse.com/use-html5-sectioning-elements?utm_source=rss&utm_medium=rss&utm_campaign=use-html5-sectioning-elements", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1392739234", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "2489:2ba35a", "id": "http://blog.teamtreehouse.com/?p=23036", "comment_count": 0, "story_title": "How to Use The HTML5 Sectioning Elements", "story_tags": ["code", "html5", "learn to code", "make a website", "articles", "footer", "header", "html5", "main", "nav", "section"], "share_count": 0, "friend_comments": [], "story_date": "2014-02-18 16:00:34", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "18 Feb 2014, 11:00am", "guid_hash": "2ba35a", "share_count_friends": 0, "image_urls": [], "story_feed_id": 2489, "long_parsed_date": "Tuesday, February 18th, 2014 11:00am", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Friday, February 21st, 2014 12:50pm", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p>HTML5 has seen the introduction of a number of sectioning elements that can be used to mark up your web pages. Using these elements gives more <em>semantic meaning</em> to your pages, allowing computer programs to better understand your content.</p>\n<p>In this post you\u2019ll learn how to use these sectioning elements in your own web sites. I\u2019ll be explaining when you should use certain elements over others, as well as when it\u2019s best to stick to a good old <code>&lt;div&gt;</code>.</p>\n<p>Lets get started.</p>\n<h2>The main Element</h2>\n<p>The <code>&lt;main&gt;</code> element should contain the main content for your web page. All of this content should be unique to the individual page, and should not appear elsewhere on the site. Any content that is repeated on multiple pages (logos, search boxes, footer links, etc.) should not be placed within the <code>&lt;main&gt;</code> element.</p>\n<p>The example below uses a <code>&lt;main&gt;</code> element to represent the main content for the page</p>\n<pre><code>&lt;body&gt;\n  &lt;header&gt;\n    &lt;div id=\"logo\"&gt;Rocking Stone&lt;/div&gt;\n    &lt;nav&gt;...&lt;/nav&gt;\n  &lt;/header&gt;\n  &lt;main role=\"main\"&gt;\n    &lt;h1&gt;Guitars&lt;/h1&gt;\n    &lt;p&gt;The greatest guitars ever built.&lt;/p&gt;\n\n    &lt;article&gt;\n      &lt;h2&gt;Gibson SG&lt;/h2&gt;\n      &lt;p&gt;...&lt;/p&gt;\n    &lt;/article&gt;\n\n    &lt;article&gt;\n      &lt;h2&gt;Fender Telecaster&lt;/h2&gt;\n      &lt;p&gt;...&lt;/p&gt;\n    &lt;/article&gt;\n  &lt;/main&gt;\n&lt;/body&gt;</code></pre>\n<hr />\n<p><strong>Note</strong>: We\u2019ve used the ARIA <code>role=\u201dmain\u201d</code> attribute here is it indicates the significance of this element to programs that don\u2019t yet support the <code>&lt;main&gt;</code> element (such as some screen readers).</p>\n<hr />\n<p>You should only use <strong>one</strong> <code>&lt;main&gt;</code> element on a page, and it shouldn\u2019t be placed within an <code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, or <code>&lt;nav&gt;</code> element.</p>\n<h2>The article Element</h2>\n<p>The <code>&lt;article&gt;</code> element should contain a piece of self-contained content that could be distributed outside the context of the page. This includes things like news articles, blog posts, or user comments.</p>\n<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Blog Post Title&lt;/h1&gt;\n    &lt;p&gt;Posted 13th February 2014&lt;/p&gt;\n  &lt;/header&gt;\n  &lt;p&gt;\n    ...\n  &lt;/p&gt;\n&lt;/article&gt;</code></pre>\n<p>You can nest <code>&lt;article&gt;</code> elements within one another. In this case it\u2019s implied that the nested elements are related to the outer <code>&lt;article&gt;</code> element.</p>\n<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Blog Post Title&lt;/h1&gt;\n    &lt;p&gt;Posted 13th February 2014&lt;/p&gt;\n  &lt;/header&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;section&gt;\n    &lt;h2&gt;Comments&lt;/h2&gt;\n    &lt;article&gt;\n      &lt;footer&gt;\n        &lt;p&gt;Posted by: Joe Balochio&lt;/p&gt;\n      &lt;/footer&gt;\n      &lt;p&gt;This was a great article&lt;/p&gt;\n    &lt;/article&gt;\n    &lt;article&gt;\n      &lt;footer&gt;\n        &lt;p&gt;Posted by: Casey Brock&lt;/p&gt;\n      &lt;/footer&gt;\n      &lt;p&gt;How do you think this applies to the plan for world domination?&lt;/p&gt;\n    &lt;/article&gt;\n  &lt;/section&gt;\n&lt;/article&gt;</code></pre>\n<p>In this example we\u2019ve used <code>&lt;article&gt;</code> elements to mark up the blog post, and each of the comments. This nesting pattern implies that the comments are related to the topic of the main blog post.</p>\n<h2>The section Element</h2>\n<p>The <code>&lt;section&gt;</code> element is used to represent a group of related content. This is similar to the purpose of an <code>&lt;article&gt;</code> element with the main difference being that the content within a <code>&lt;section&gt;</code> element doesn\u2019t necessarily need to make sense out of the context of the page.</p>\n<p>It\u2019s advisable to use a heading element (<code>&lt;h1&gt;</code> &#8211; <code>&lt;h6&gt;</code>) to define the topic for the section.</p>\n<p>Using this blog post as an example, you could have <code>&lt;section&gt;</code> elements that represent each of the individual parts within the post.</p>\n<pre><code>&lt;article&gt;\n  &lt;h1&gt;How to use HTML5 Sectioning Elements&lt;/h1&gt;\n  &lt;p&gt;...&lt;/p&gt;\n\n  &lt;section&gt;\n    &lt;h2&gt;The &lt;main&gt; Element&lt;/h2&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h2&gt;The &lt;article&gt; Element&lt;/h2&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/section&gt;\n  &lt;section&gt;\n    &lt;h2&gt;The &lt;section&gt; Element&lt;/h2&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/section&gt;\n  ...\n&lt;/article&gt;</code></pre>\n<p>Here we\u2019ve used an <code>&lt;article&gt;</code> element to represent the post as a whole, and then multiple <code>&lt;section&gt;</code> elements to represent each of the sub-topics discussed in the post.</p>\n<p>If you just need to group content together for styling purposes you should use a <code>&lt;div&gt;</code> element rather than a <code>&lt;section&gt;</code>.</p>\n<h2>The nav Element</h2>\n<p>The <code>&lt;nav&gt;</code> element is used to mark up a collection of links to external pages or sections within the current page. As well as being used for the main website navigation, the <code>&lt;nav&gt;</code> element is also a good fit for things like a table of contents, or a blogroll.</p>\n<pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#chapter-one\"&gt;Chapter One&lt;/a&gt;\n    &lt;li&gt;&lt;a href=\"#chapter-two\"&gt;Chapter Two&lt;/a&gt;\n    &lt;li&gt;&lt;a href=\"#chapter-three\"&gt;Chapter Three&lt;/a&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;</code></pre>\n<p>Marking up your links within a list will often make your navigation easier to use, however this is not a requirement when using a <code>&lt;nav&gt;</code> element.</p>\n<h2>The aside Element</h2>\n<p>The <code>&lt;aside&gt;</code> element is used to represent content that is tangibly related to the content surrounding it, but could be considered separate. This includes things like sidebars (like those you might find in a book), groups of <code>&lt;nav&gt;</code> elements, figures and pull quotes.</p>\n<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Google Buys Nest&lt;/h1&gt;\n    &lt;p&gt;Posted at 11:34am 13th January 2014&lt;/p&gt;\n  &lt;/header&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;p&gt;...&lt;/p&gt;\n\n  &lt;aside&gt;\n    &lt;h1&gt;Google (GOOG)&lt;/h1&gt;\n    &lt;p&gt;Google was founded in 1998 by Larry Page and Sergey Brin. The company...&lt;/p&gt;\n  &lt;/aside&gt;\n&lt;/article&gt;</code></pre>\n<p>In this example we\u2019ve used an <code>&lt;aside&gt;</code> element to mark up information about Google within a news article. The company information in the <code>&lt;aside&gt;</code> could be considered useful by the reader but it\u2019s not directly related to the news story.</p>\n<h2>The header Element</h2>\n<p>The <code>&lt;header&gt;</code> element is used to represent the introductory content to an article or web page. This will usually contain a heading element as well as some metadata that\u2019s relevant to the content, such as the post date of a news article for example. It could also contain a table of contents (within a <code>&lt;nav&gt;</code> element) for a longer document.</p>\n<p>A <code>&lt;header&gt;</code> element will be associated with the nearest sectioning element, usually it\u2019s direct parent in the page structure.</p>\n<pre><code>&lt;header&gt;\n  &lt;h1&gt;Google buys Nest&lt;/h1&gt;\n  &lt;p&gt;Posted at 11:34am 13th January 2014&lt;/p&gt;\n&lt;/header&gt;</code></pre>\n<p>In this example the <code>&lt;header&gt;</code> element contains the title and posted date for a news article.</p>\n<h2>The footer Element</h2>\n<p>The <code>&lt;footer&gt;</code> element is used to represent information about a section such as the author, copyright information, or links to related web pages.</p>\n<pre><code>&lt;footer&gt;\nCopyright Matt West 2014\n&lt;/footer&gt;</code></pre>\n<p>As with <code>&lt;header&gt;</code>, the <code>&lt;footer&gt;</code> element is associated with the nearest sectioning element.</p>\n<h2>The address Element</h2>\n<p>The <code>&lt;address&gt;</code> element is one of the most commonly misunderstood HTML elements. This element is not for marking up postal address, but rather for representing the contact information for an article or web page. This could be a link to the author\u2019s website or their email address.</p>\n<pre><code>&lt;address&gt;\n  Contact &lt;a href=\"mailto:matt@example.com\"&gt;Matt West&lt;/a&gt;\n&lt;/address&gt;</code></pre>\n<p>This element is often used within the <code>&lt;footer&gt;</code> for an <code>&lt;article&gt;</code>.</p>\n<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Google buys Nest&lt;/h1&gt;\n    &lt;p&gt;Posted at 11:34am 13th January 2014&lt;/p&gt;\n  &lt;/header&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;p&gt;...&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;address&gt;\n      By &lt;a href=\"mailto:matt@example.com\"&gt;Matt West&lt;/a&gt;\n    &lt;/address&gt;\n    &lt;p&gt;Copyright Matt West 2014&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/article&gt;</code></pre>\n<h2>Final Thoughts on the Sectioning Elements</h2>\n<p>In this post you\u2019ve learned how to use the HTML5 sectioning elements when marking up your web pages. Using these elements has a number of benefits. One of the biggest being that it gives certain areas of your page more semantic meaning, allowing computer programs to identify key elements like the main content and page navigation. This information is extremely useful to applications like screen readers.</p>\n<hr />\n<p><strong>Note:</strong> Not all screen readers have support for these semantic elements yet. You may want to continue using <a href=\"http://alistapart.com/article/aria-and-progressive-enhancement/\">ARIA roles</a>\u00a0just to be safe.</p>\n<hr />\n<p>Using these sectioning elements also has the benefit of making developers think more about the structure of their web pages. Selecting which element to use for a piece of content isn&#8217;t always obvious, but it raises important questions about the purpose of that content, and whether it belongs on the page at all. This is an example of where web standards are not only helping to improve the quality of our markup, but the quality of our web pages as a whole.</p>\n<p>I\u2019m interested to hear your thoughts on the HTML5 sectioning elements. Share your views in the comments below.</p>\n<h2>Useful Links</h2>\n<ul>\n<li><a href=\"http://www.w3.org/html/wg/drafts/html/master/sections.html#the-article-element\">W3C HTML5 Spec</a></li>\n</ul>\n<p>The post <a href=\"http://blog.teamtreehouse.com/use-html5-sectioning-elements\">How to Use The HTML5 Sectioning Elements</a> appeared first on <a href=\"http://blog.teamtreehouse.com\">Treehouse Blog</a>.</p>", "starred": true},
    {"story_authors": "Jonathan Snook ", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://snook.ca/archives/javascript/more-simple-slideshow", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1392787397", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "1826:49c352", "id": "http://snook.ca/archives/javascript/more-simple-slideshow", "comment_count": 0, "story_title": "More Simple jQuery Slideshows", "story_tags": [], "share_count": 0, "friend_comments": [], "story_date": "2014-02-19 05:23:17", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "19 Feb 2014, 12:23am", "guid_hash": "49c352", "share_count_friends": 0, "image_urls": [], "story_feed_id": 1826, "long_parsed_date": "Wednesday, February 19th, 2014 12:23am", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Friday, February 21st, 2014 12:39pm", "read_status": 1, "shared_by_public": [], "comment_count_public": 0, "commented_by_public": [], "story_content": "<p>Over 4 years ago, <a href=\"http://snook.ca/archives/javascript/simplest-jquery-slideshow\">I wrote a really simple slideshow script using jQuery</a>. It just took a bunch of images of the same dimensions and cycled through them. The code is only a few lines long (jQuery notwithstanding). </p>\n\n<p>Since that time, however, people have often asked for variations. I've updated the <a href=\"http://snook.ca/technical/fade/fade.html\">demo page</a> with most requested variations.</p>\n\n<h2>Linking the Slides</h2>\n\n<p>Sure the images rotated but you know what's even better? Being able to link the images to specific pages! This was by far the most popular request. The original code was very specific to images. With a few minor tweaks, the script could be made to cycle through all child elements, whether they're images, divs, or links.</p>\n\n<pre><code>$('.fadelinks > :gt(0)').hide();\n  setInterval(function(){\n    $('.fadelinks > :first-child').fadeOut()\n     .next().fadeIn().end()\n     .appendTo('.fadelinks');\n  }, 3000);\n});</code></pre>\n\n<p>References to <code>img</code> elements begone! The CSS also needs a minor tweak to target the child elements. I used this child selector, which means that if you have to support IE6, you'll need to make some more CSS adjustments to make it work.</p>\n\n<pre><code>.fadelinks { position:relative; height:332px; width:500px; }\n.fadelinks > * { position:absolute; left:0; top:0; display:block; }</code></pre>\n\n<h2>Random Images</h2>\n\n<p>Having the images go 1-2-3 is a little too predictable for some. Wouldn't it be nice if it could be randomized? This required a bit more work but barely. Imagine the images are like a deck of cards. I take the top card and put it on the bottom of the deck. Then I pick a random card and move it to the top of the deck. Repeat.</p>\n\n<pre><code>  $('.faderandom > :gt(0)').hide();\n  setInterval(function(){\n    var rand = Math.floor(Math.random() * ($('.faderandom').children().length-1));\n    $('.faderandom > :first-child').appendTo('.faderandom').fadeOut();\n    $('.faderandom > *').eq(rand).prependTo('.faderandom').fadeIn();\n  }, 3000);\n</code></pre>\n\n<p>First, I need to get a random number. I use this with jQuery's <code>eq()</code> method to pick a card from the deck and move it to the front of the deck with <code>prependTo()</code>. This is still a tiny amount of jQuery to pull this off.</p>\n\n<h2>Multiple Slideshow</h2>\n<p>My original script was very simple and only worked if there was only one slideshow on the page. You had to copy/paste the script multiple times changing just the class name to point to the new slideshow. That's not very <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY</a>.</p>\n<p>Now I started writing more code than I really felt comfortable with. There's probably a more elegant way to do this but I put this together really quickly. And, well, it still works. This time, I loop through each slideshow and store the currently selected slideshow in a closure for use within the <code>setInterval</code> call.</p>\n<pre><code>$('.multipleslides').each(function(){\n  // scope everything for each slideshow\n  var $this = this;\n  $('> :gt(0)', $this).hide();\n  setInterval(function(){\n    $('> :first-child',$this).fadeOut()\n      .next().fadeIn().end()\n      .appendTo($this);\n  }, 3000);\n})\n</code></pre>\n<p>And that's it! More simple slideshows.</p>", "starred": true},
    {"story_authors": "Aurelio De Rosa", "intelligence": {"feed": 1, "tags": 0, "author": 0, "title": 0}, "shared_by_friends": [], "story_permalink": "http://feedproxy.google.com/~r/SitepointFeed/~3/40JvCtQfkyE/", "reply_count": 0, "comment_user_ids": [], "story_timestamp": "1392825620", "share_user_ids": [], "user_id": 103195, "user_tags": [], "story_hash": "5025883:ae54c6", "id": "http://www.sitepoint.com/?p=76830", "comment_count": 0, "story_title": "10 HTML5 APIs Worth Looking Into", "story_tags": ["apis", "html", "html5", "javascript", "mobile", "raw javascript", "web", "battery status api", "dom api", "fullscreen api", "getusermedia", "high resolution time"], "share_count": 0, "friend_comments": [], "story_date": "2014-02-19 16:00:20", "share_count_public": 0, "friend_user_ids": [], "public_user_ids": [], "short_parsed_date": "19 Feb 2014, 11:00am", "guid_hash": "ae54c6", "share_count_friends": 0, "image_urls": ["http://feeds.feedburner.com/~ff/SitepointFeed?d=yIl2AUoC8zA", "http://feeds.feedburner.com/~ff/SitepointFeed?d=qj6IDK7rITs", "http://feeds.feedburner.com/~ff/SitepointFeed?i=40JvCtQfkyE:BqNAUGzCb28:gIN9vFwOqvQ", "http://feeds.feedburner.com/~r/SitepointFeed/~4/40JvCtQfkyE"], "story_feed_id": 5025883, "long_parsed_date": "Wednesday, February 19th, 2014 11:00am", "comment_count_friends": 0, "public_comments": [], "commented_by_friends": [], "starred_date": "Friday, February 21st, 2014 12:36pm", "read_status": 1, "shared_by_public": [], "has_modifications": true, "comment_count_public": 0, "commented_by_public": [], "story_content": "<p></p><p>The tools available to create powerful applications on the web platform are getting better with each passing year. The HTML5 specification has added a number of useful features in new APIs that you may not have delved into yet, likely because of the lack of browser support.</p> <p>In this post, we'll take a look at <strong>10 HTML5 APIs</strong> that cover a whole slew of functionality and features that can help you create interactive websites, test the performance of your code, interact with a user\u2019s device, and much more.</p> <p>And as you'll see, support for these features is probably a lot better than you might think.</p><p> <ins>Continue reading %</ins> <del>The post</del> <a href=\"http://www.sitepoint.com/10-html5-apis-worth-looking/\" rel=\"nofollow\">10 HTML5 APIs Worth Looking Into</a> <ins>% by %<a href=\"http://www.sitepoint.com/author/aderosa/\" rel=\"nofollow author\">Aurelio De Rosa</a>%</ins> <del>appeared first on <a href=\"http://www.sitepoint.com\" rel=\"nofollow\">SitePoint</a>.</del> </p><div class=\"feedflare\"><a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=40JvCtQfkyE:BqNAUGzCb28:yIl2AUoC8zA\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?d=yIl2AUoC8zA\"></a> <a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=40JvCtQfkyE:BqNAUGzCb28:qj6IDK7rITs\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?d=qj6IDK7rITs\"></a> <a href=\"http://feeds.feedburner.com/~ff/SitepointFeed?a=40JvCtQfkyE:BqNAUGzCb28:gIN9vFwOqvQ\"><img border=\"0\" src=\"http://feeds.feedburner.com/~ff/SitepointFeed?i=40JvCtQfkyE:BqNAUGzCb28:gIN9vFwOqvQ\"></a> </div><img height=\"1\" src=\"http://feeds.feedburner.com/~r/SitepointFeed/~4/40JvCtQfkyE\" width=\"1\">", "starred": true}
  ], "result": "ok", "user_id": 103195, "feeds": {}, "message": null, "user_profiles": [
    {"username": "alvinashcraft", "feed_address": "http://www.newsblur.com/social/rss/109116/alvinashcraft", "user_id": 109116, "feed_link": "http://alvinashcraft.newsblur.com", "num_subscribers": 19, "feed_title": "alvinashcraft's blurblog", "private": false, "protected": false, "location": "West Grove, PA", "large_photo_url": "https://www.gravatar.com/avatar/19ac6a9d902c1d6ae33f41405e47b385", "id": "social:109116", "photo_url": "https://www.gravatar.com/avatar/19ac6a9d902c1d6ae33f41405e47b385"},
    {"username": "cyberblox", "feed_address": "http://www.newsblur.com/social/rss/136359/cyberblox", "user_id": 136359, "feed_link": "http://cyberblox.newsblur.com", "num_subscribers": 0, "feed_title": "cyberblox's blurblog", "private": null, "protected": null, "location": "Marietta, Georgia", "large_photo_url": "https://graph.facebook.com/1357857878/picture?type=large", "id": "social:136359", "photo_url": "https://graph.facebook.com/1357857878/picture"}
  ]};

  beforeEach(module('testConstants', 'portfolioApp.controllers', 'portfolioApp.services', 'AppConstants', 'ngRoute', 'portfolioAppConfig', 'jmdobry.angular-cache'));

  // Initialize the controller and a mock scope
  beforeEach(inject(function (_$controller_, _$rootScope_, _MOCK_DATA_, _$httpBackend_, _$q_) {
    $controller = _$controller_;
    $rootScope = _$rootScope_;
    MOCK_DATA = _MOCK_DATA_;
    $httpBackend = _$httpBackend_;
    $q = _$q_;

    scope = $rootScope.$new();

    FooterInherCtrl = $controller('FooterCtrl as FooterInherCtrl', {
      $scope: scope
    });

    $httpBackend.expect('GET', '/api/newsblur/get').respond(200, newsBlurResponse);

    scope.$apply(function () {
      FooterInherCtrl.loadData();
    });

    $httpBackend.flush();


  }));

  it('check local scope changes in public function loadData', function () {

    expect(scope.recArticle.title).toBe(newsBlurResponse.stories[0].story_title);
    expect(scope.recArticle.author).toBe(newsBlurResponse.stories[0].story_authors);
    expect(scope.recArticle.link).toBe(newsBlurResponse.stories[0].story_permalink);
    expect(scope.recArticle.date).toBe(newsBlurResponse.stories[0].short_parsed_date.split(',')[0]);

  });

  it('Tests the _createContentSnippet() function. Must be 270 or fewer characters, to contain an ellipse and finish with double quotes', function () {

    expect(scope.recArticle.content.length).toBeLessThan(270);
    expect(scope.recArticle.content).toContain('...');
    expect(scope.recArticle.content).toMatch(/["]$/);

  });

});



